<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title></title>
		<style type="text/css">
			*{
				margin: 0;
				padding: 0;
			}
			div{
				width: 800px;
				margin: auto;
				background: #ececec;
			}

		</style>
	</head>
	<body>
					   	   
		<br/>
        <div>
        	<h2>this指向、原型继承、视频</h2>
        	<h3>1、this指向</h3>	
        			<pre>

	//1、全局指向
	var num = 10;
	function foo(){
		this.num = 1;
	}
	foo();
	alert(num);
	this指全局window，所以一开始num赋值10，但执行函数时又将1赋值给num，所以最终num等于1
	
	//2、对象
	var obj = {}；
	var num = 3;
	obj.num = 5;
	obj.f=function(){
		alert(this.num);
	}
	obj.f();
	alert(num);
	//第一个弹窗显示5；第二个显示3；
	因为第一个this指的是obj，所以obj.num=5；
	第二个this指的是window，所以num=3；
	
	//3、函数返回指向
	var num = 1;
	function foo(){
		return function(){
			return this.num;
		}
	}
	var f = foo();
	console.log(f());
	显示1；因为当你运行foo函数后return的整个函数就在window下了，
	再次执行return出来的函数时它的this指的是window，所以最终显示1；
	
	//apply()  改变函数内部this指向对象
	var num = 10；
	var obj = {}；
	obj.num=1;
	obj.f = function(){
		alert(this.num);
	}
	obj.f.apply();
	假设你没在apply里面写任何参数，那么它默认的就是window；
	所以this.num显示10；
	obj.f.apply(obj)
	假设你在apply()里面写了obj，那么this指向的就是obj；
	所以this.num显示1；
		</pre>
        </div>
        
        <br/>
        <div>
        	<pre>
	//试题
	var say="Hello World";
	var obj={};
	obj.say="Hello Obj";
	obj.foo=function(){
		return function(){
			return this.say;
		}
	}
	alert(obj.foo()());
	
	
	
	var say="Hello World";
	var obj={};
	obj.say="Hello Obj";
	obj.foo=function(){
		var that=this;
		return function(){
			return that.say;
		}
	}
	alert(obj.foo()());
	
	答案自己想，要理解它们this的指向
        	</pre>
        </div>
        
         <br/>
        <div>
	    	 <h3>2、原型继承</h3>
	         <p>这东西不是很懂，只能粗略的写一下</p>
	         <pre>
	var o = {};
	o.push = Array.prototype.push;
	o.push("hello");
	o.push("world");
	会在对象o显示{0:"hello",1:"world"};
	prototype和_proto_这两个东西自己去了解
	         </pre>
        </div>
         
        <br/>
        <div>
     	    <h3>3、视频</h3>
     	    <p>1、视频显示范围
			<p>2、右键选项
			<p>3、视频进度条
			<p>4、视频进度条缩略图
			<p>5、播放和暂停功能
			<p>6、上一个视频和下一个视频
			<p>7、音量控制
			<p>8、视频当前播放时间和视频总时长
			<p>9、视频全屏
			<p>10、视频进度条拖动进度播放
        </div>
        
 
	</body>
</html>
